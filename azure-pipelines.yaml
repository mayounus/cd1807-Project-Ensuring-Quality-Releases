name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
- group: 'myvars' 
- name: python.version
  value: '3.7.6'
- name: azureServiceConnectionId
  value: 'udacity-AR-scp'
- name:  projectRoot
  value: $(System.DefaultWorkingDirectory)
- name: environmentName
  value: 'test-vm'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  #azureServiceConnectionId: 'udacity-AR-scp'
  # Project root folder. Point to the folder containing manage.py file.
  #projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  #environmentName: 'test-vm'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate1072916241'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run Validation.postman_collection.json -e Postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml --env-var "client_id=$(client_id)" --env-var "client_secret=$(client_secret)"'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run Regression.postman_collection.json -e Postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml --env-var "client_id=$(client_id)" --env-var "client_secret=$(client_secret)"' 
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        #searchFolder:       # ToDo
        mergeTestResults: true
        #testRunTitle:       # ToDo

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool: myAgentPool
      #vmImage: 'Ubuntu-18.04'      
    environment: $(environmentName)   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'     # ToDo
              appName: 'moApplication2-AppService'              # ToDo
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip        # ToDo: Use the published zip artifact. 
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
              script: |
                export JAVA_HOME=/usr/lib/jvm/java-16-openjdk-amd64
                export PATH=$PATH:$JAVA_HOME/bin
                wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.2.tgz"
                tar -xf apache-jmeter-5.6.2.tgz
                #unzip -o $(Build.BuildId)-perftests.zip
                ./apache-jmeter-5.6.2/bin/jmeter -n -t $(Pipeline.Workspace)/drop-perftests/automatedtesting/jmeter/UdacityStest.jmx -j jmeter.log -l stress_results.log -f -e -o Dashboard
                cat jmeter.log 
              workingDirectory: '$(Pipeline.Workspace)/drop-perftests'            # ToDo: Use the artifact name from the task above
          - task: ArchiveFiles@2
            displayName: 'Archive results'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/drop-perftests'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-dashboard.zip'
          - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-dashboard.zip'
            displayName: 'Upload Jmeter Artifacts'
            artifact: jmeter-results
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name:    test-vm     # ToDo: Change/provide a name
      
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests     # ToDo: Change/provide a name
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                  
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                pip3 install selenium
                cd ~/
                DIR=/home/azureuser/app
                if [ ! -d "$DIR" ]; then
                  mkdir app
                fi
                mv /home/azureuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                wget -O google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo dpkg -i google-chrome-stable_current_amd64.deb > /dev/null
                sudo apt --fix-broken install --yes
                wget -O chromedriver_linux64.zip https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.170/linux64/chromedriver-linux64.zip
                unzip -o chromedriver_linux64.zip
                sudo ln -sf $PWD/chromedriver_linux64/chromedriver /usr/local/bin/chromedriver
                export PATH=$PATH:/home/azureuser/app
                echo "Run Selenium Test"
                python3 add_remove_from_cart.py >> selenium.log
                echo "Selenium test complete. Check selenium.log for results."
                cat selenium.log
  - deployment: PostmanTests
    dependsOn: FakeRestAPI
    pool: myAgentPool
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: Newman Instlal
            inputs:
              script: 'sudo npm install -g newman'
              workingDirectory: $(System.DefaultWorkingDirectory)
        # Postman Data Validation Test Suite    
        # ToDo: Verify the working directory
          - task: CmdLine@2
            displayName: Validation postman tests
            continueOnError: true
            inputs:
              script: 'newman run PostDeploymentValidationpostman_collection.json -e Postman_environment.json --reporters cli,junit --reporter-junit-export postmanValidation.xml --env-var "client_id=$(client_id)" --env-var "client_secret=$(client_secret)"'
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman Regression Test Suite    
          # ToDo: Verify the working directory
          - task: CmdLine@2
            displayName: Regression postman tests
            continueOnError: true
            inputs:
              script: 'newman run PostDeploymentRegressionpostman_collection.json -e Postman_environment.json --reporters cli,junit --reporter-junit-export postRegression.xml --env-var "client_id=$(client_id)" --env-var "client_secret=$(client_secret)"'
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman - Publish Results now that it's enabled
          # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              mergeTestResults: true
              testRunTitle: 'PostDeploy Results'
          - task: ArchiveFiles@2
            displayName: 'Postman result'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postdeploy-postman.zip'
          - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postdeploy-postman.zip'
            displayName: 'Upload Postman logs'
            artifact: deploy-postman